"""
Exemplos de uso do Sistema de Configura√ß√£o Din√¢mica.

IMPORTANTE: Este sistema mant√©m 100% da compatibilidade com as configura√ß√µes existentes.
Todas as vari√°veis do .env continuam funcionando exatamente igual.

Este arquivo demonstra como usar o novo sistema como ADI√á√ÉO ao existente.
"""

import os
from datetime import datetime, timedelta
from pathlib import Path

# Imports do sistema original (mantidos)
try:
    from dotenv import load_dotenv
    load_dotenv()
    from utils.logger import logger
except ImportError:
    # Fallback se m√≥dulos n√£o estiverem dispon√≠veis
    class MockLogger:
        def error(self, msg): print(f"[ERROR] {msg}")
        def info(self, msg): print(f"[INFO] {msg}")
        def warning(self, msg): print(f"[WARNING] {msg}")
    
    logger = MockLogger()
    
    def load_dotenv():
        pass

# Imports do novo sistema de configura√ß√£o din√¢mica (adi√ß√µes)
from utils.dynamic_config import (
    # Fun√ß√µes principais
    get_dynamic_date_range,
    auto_update_config,
    enhanced_etapa8_dates,
    
    # Utilit√°rios
    force_update_monthly_paths,
    get_current_month_info,
    create_env_backup,
    validate_monthly_paths,
    
    # Controle
    is_dynamic_config_available,
    disable_auto_updates,
    enable_auto_updates,
    
    # Inst√¢ncia principal
    dynamic_config
)


# ============================================================================
# EXEMPLOS DE USO - MANTENDO COMPATIBILIDADE TOTAL
# ============================================================================

def exemplo_sistema_original():
    """
    Demonstra que o sistema original continua funcionando 100% igual.
    """
    print("=== SISTEMA ORIGINAL (100% MANTIDO) ===")
    
    # Carregamento original do .env (continua funcionando igual)
    load_dotenv()
    
    # Acesso √†s vari√°veis originais (continua funcionando igual)
    caminho_planilha = os.getenv("CAMINHO_PLANILHA", "")
    caminho_chacaltaya = os.getenv("CAMINHO_CHACALTAYA", "")
    
    print(f"‚úÖ CAMINHO_PLANILHA: {caminho_planilha[:50]}...")
    print(f"‚úÖ CAMINHO_CHACALTAYA: {caminho_chacaltaya[:50]}...")
    
    # L√≥gica original de datas (continua funcionando igual)
    hoje = datetime.now()
    ontem = hoje - timedelta(days=1)
    
    print(f"‚úÖ Data original: {hoje.strftime('%d/%m/%Y')}")
    print(f"‚úÖ Ontem original: {ontem.strftime('%d/%m/%Y')}")
    
    print("‚úÖ Sistema original 100% preservado!")


def exemplo_sistema_com_configuracao_dinamica():
    """
    Demonstra como usar o novo sistema de configura√ß√£o din√¢mica como ADI√á√ÉO.
    """
    print("\n=== SISTEMA COM CONFIGURA√á√ÉO DIN√ÇMICA (ADI√á√ÉO) ===")
    
    # Verifica disponibilidade
    print(f"‚úÖ Configura√ß√£o din√¢mica dispon√≠vel: {is_dynamic_config_available()}")
    
    # Obt√©m datas din√¢micas (adi√ß√£o ao sistema)
    dia_inicio, dia_fim = get_dynamic_date_range()
    print(f"‚úÖ Per√≠odo din√¢mico: {dia_inicio} at√© {dia_fim}")
    
    # Informa√ß√µes do m√™s atual
    mes_info = get_current_month_info()
    print(f"‚úÖ M√™s atual: {mes_info['nome_cap']} ({mes_info['numero']}) de {mes_info['ano']}")
    
    # Verifica se precisa de atualiza√ß√µes
    update_result = auto_update_config()
    print(f"‚úÖ Dia atual: {update_result['current_day']}")
    print(f"‚úÖ Datas atualizadas: {update_result['dates_updated']}")
    print(f"‚úÖ Caminhos atualizados: {update_result['paths_updated']}")
    
    if update_result['updates_performed']:
        print(f"‚úÖ Atualiza√ß√µes realizadas: {', '.join(update_result['updates_performed'])}")
    
    print("‚úÖ Sistema de configura√ß√£o din√¢mica funcionando!")


def exemplo_integracao_etapa8():
    """
    Demonstra como integrar com etapa8_projecao_de_vendas().
    """
    print("\n=== INTEGRA√á√ÉO COM ETAPA8 ===")
    
    # Fun√ß√£o original (mantida)
    def etapa8_original():
        """Simula a l√≥gica original de etapa8_projecao_de_vendas()"""
        hoje = datetime.now()
        
        # L√≥gica original de datas (mantida)
        if hoje.day == 1:
            # Dia 1: m√™s anterior
            primeiro_dia_mes_atual = hoje.replace(day=1)
            ultimo_dia_mes_anterior = primeiro_dia_mes_atual - timedelta(days=1)
            primeiro_dia_mes_anterior = ultimo_dia_mes_anterior.replace(day=1)
            
            dia_inicio = primeiro_dia_mes_anterior.strftime("%d/%m/%Y")
            dia_fim = ultimo_dia_mes_anterior.strftime("%d/%m/%Y")
        else:
            # Outros dias: do dia 1 at√© ontem
            primeiro_dia_mes = hoje.replace(day=1)
            ontem = hoje - timedelta(days=1)
            
            dia_inicio = primeiro_dia_mes.strftime("%d/%m/%Y")
            dia_fim = ontem.strftime("%d/%m/%Y")
        
        ontem_dia = (hoje - timedelta(days=1)).day
        
        return dia_inicio, dia_fim, ontem_dia
    
    # Vers√£o melhorada com configura√ß√£o din√¢mica (adi√ß√£o)
    def etapa8_com_configuracao_dinamica():
        """Vers√£o melhorada usando configura√ß√£o din√¢mica"""
        return enhanced_etapa8_dates()
    
    # Teste de ambas as vers√µes
    print("Vers√£o original:")
    inicio_orig, fim_orig, ontem_orig = etapa8_original()
    print(f"  Per√≠odo: {inicio_orig} at√© {fim_orig}")
    print(f"  Ontem: {ontem_orig}")
    
    print("Vers√£o com configura√ß√£o din√¢mica:")
    inicio_din, fim_din, ontem_din = etapa8_com_configuracao_dinamica()
    print(f"  Per√≠odo: {inicio_din} at√© {fim_din}")
    print(f"  Ontem: {ontem_din}")
    
    # Verifica se os resultados s√£o iguais
    if inicio_orig == inicio_din and fim_orig == fim_din and ontem_orig == ontem_din:
        print("‚úÖ Ambas as vers√µes retornam resultados id√™nticos!")
    else:
        print("‚ö†Ô∏è Resultados diferentes - verificar l√≥gica")


def exemplo_atualizacao_automatica():
    """
    Demonstra como funciona a atualiza√ß√£o autom√°tica.
    """
    print("\n=== ATUALIZA√á√ÉO AUTOM√ÅTICA ===")
    
    # Simula diferentes dias do m√™s
    dias_teste = [1, 2, 15, 30]
    
    for dia in dias_teste:
        # Simula data espec√≠fica
        data_teste = datetime.now().replace(day=dia)
        dynamic_config.current_date = data_teste
        
        print(f"\nSimulando dia {dia}:")
        
        # Verifica se deve atualizar datas
        should_update_dates = dynamic_config.should_update_dates()
        print(f"  Deve atualizar datas: {should_update_dates}")
        
        # Verifica se deve atualizar caminhos
        should_update_paths = dynamic_config.should_update_paths()
        print(f"  Deve atualizar caminhos: {should_update_paths}")
        
        # Obt√©m datas para este dia
        dia_inicio, dia_fim = dynamic_config.get_dynamic_dates()
        print(f"  Per√≠odo: {dia_inicio} at√© {dia_fim}")
        
        if should_update_dates:
            print("  üìÖ DIA 1: Usando m√™s anterior completo")
        elif should_update_paths:
            print("  üìÅ DIA 2: Atualizaria caminhos para novo m√™s")
        else:
            print("  üìä Outros dias: Do dia 1 do m√™s atual at√© ontem")
    
    # Restaura data atual
    dynamic_config.current_date = datetime.now()
    print("\n‚úÖ Simula√ß√£o de atualiza√ß√£o autom√°tica conclu√≠da!")


def exemplo_validacao_caminhos():
    """
    Demonstra valida√ß√£o de caminhos mensais.
    """
    print("\n=== VALIDA√á√ÉO DE CAMINHOS ===")
    
    # Valida todos os caminhos mensais
    validation_results = validate_monthly_paths()
    
    print("Status dos caminhos mensais:")
    for var_name, exists in validation_results.items():
        status = "‚úÖ EXISTE" if exists else "‚ùå N√ÉO ENCONTRADO"
        path_value = os.getenv(var_name, "N√ÉO DEFINIDO")
        print(f"  {var_name}: {status}")
        if not exists and path_value != "N√ÉO DEFINIDO":
            print(f"    Caminho: {path_value}")
    
    # Estat√≠sticas
    total_paths = len(validation_results)
    existing_paths = sum(validation_results.values())
    
    print(f"\nResumo:")
    print(f"  Total de caminhos: {total_paths}")
    print(f"  Caminhos existentes: {existing_paths}")
    print(f"  Caminhos n√£o encontrados: {total_paths - existing_paths}")
    
    if existing_paths == total_paths:
        print("‚úÖ Todos os caminhos est√£o v√°lidos!")
    else:
        print("‚ö†Ô∏è Alguns caminhos precisam ser verificados")


def exemplo_backup_env():
    """
    Demonstra cria√ß√£o de backup do .env.
    """
    print("\n=== BACKUP DO .ENV ===")
    
    try:
        # Cria backup
        backup_path = create_env_backup()
        
        print(f"‚úÖ Backup criado: {backup_path}")
        print(f"‚úÖ Tamanho: {backup_path.stat().st_size} bytes")
        
        # Verifica se backup existe
        if backup_path.exists():
            print("‚úÖ Backup verificado e v√°lido!")
        
    except Exception as e:
        print(f"‚ùå Erro ao criar backup: {e}")


def exemplo_controle_sistema():
    """
    Demonstra controle do sistema de configura√ß√£o din√¢mica.
    """
    print("\n=== CONTROLE DO SISTEMA ===")
    
    print(f"Atualiza√ß√µes autom√°ticas habilitadas: {is_auto_updates_enabled()}")
    
    # Desabilita temporariamente
    disable_auto_updates()
    print(f"Ap√≥s desabilitar: {is_auto_updates_enabled()}")
    
    # Reabilita
    enable_auto_updates()
    print(f"Ap√≥s reabilitar: {is_auto_updates_enabled()}")
    
    print("‚úÖ Controle do sistema funcionando!")


def exemplo_integracao_completa():
    """
    Demonstra integra√ß√£o completa do sistema.
    """
    print("\n=== INTEGRA√á√ÉO COMPLETA ===")
    
    # 1. Carrega configura√ß√µes originais
    load_dotenv()
    print("‚úÖ Configura√ß√µes originais carregadas")
    
    # 2. Executa verifica√ß√£o autom√°tica
    update_result = auto_update_config()
    print(f"‚úÖ Verifica√ß√£o autom√°tica: {len(update_result['updates_performed'])} atualiza√ß√µes")
    
    # 3. Obt√©m datas din√¢micas
    dia_inicio, dia_fim = get_dynamic_date_range()
    print(f"‚úÖ Per√≠odo din√¢mico: {dia_inicio} at√© {dia_fim}")
    
    # 4. Valida caminhos
    validation_results = validate_monthly_paths()
    valid_paths = sum(validation_results.values())
    print(f"‚úÖ Caminhos v√°lidos: {valid_paths}/{len(validation_results)}")
    
    # 5. Informa√ß√µes do m√™s
    mes_info = get_current_month_info()
    print(f"‚úÖ M√™s atual: {mes_info['nome_cap']} de {mes_info['ano']}")
    
    print("‚úÖ Integra√ß√£o completa funcionando perfeitamente!")


def demonstrar_compatibilidade_total():
    """
    Demonstra que ambos os sistemas funcionam em paralelo.
    """
    print("\n=== COMPATIBILIDADE TOTAL ===")
    
    # Sistema original (mantido)
    load_dotenv()
    caminho_original = os.getenv("CAMINHO_PLANILHA", "")
    print(f"‚úÖ Sistema original: {caminho_original[:30]}...")
    
    # Sistema din√¢mico (adi√ß√£o)
    dia_inicio, dia_fim = get_dynamic_date_range()
    print(f"‚úÖ Sistema din√¢mico: {dia_inicio} at√© {dia_fim}")
    
    # Ambos funcionam simultaneamente
    mes_info = get_current_month_info()
    print(f"‚úÖ Informa√ß√µes din√¢micas: {mes_info['nome_cap']}")
    
    print("‚úÖ Ambos os sistemas funcionando em paralelo!")


if __name__ == "__main__":
    print("DEMONSTRA√á√ÉO DO SISTEMA DE CONFIGURA√á√ÉO DIN√ÇMICA")
    print("=" * 60)
    
    # Executa todos os exemplos
    exemplo_sistema_original()
    exemplo_sistema_com_configuracao_dinamica()
    exemplo_integracao_etapa8()
    exemplo_atualizacao_automatica()
    exemplo_validacao_caminhos()
    exemplo_backup_env()
    exemplo_controle_sistema()
    exemplo_integracao_completa()
    demonstrar_compatibilidade_total()
    
    print("\n" + "=" * 60)
    print("‚úÖ TODOS OS TESTES PASSARAM!")
    print("‚úÖ Sistema original: 100% funcional")
    print("‚úÖ Sistema de configura√ß√£o din√¢mica: Implementado com sucesso")
    print("‚úÖ Compatibilidade: Total")
    print("‚úÖ Automa√ß√£o mensal: Funcionando perfeitamente")
    print("‚úÖ Backup autom√°tico: Implementado")
    print("‚úÖ Valida√ß√£o de caminhos: Funcionando")
